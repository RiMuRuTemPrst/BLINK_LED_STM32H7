
BLINK_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000364  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005fc  080005fc  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080005fc  080005fc  000105fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000600  08000600  00010600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  24000000  08000604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000008  0800060c  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000028  0800060c  00020028  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY
 10 .debug_info   000028c2  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000005bf  00000000  00000000  0002293b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000280  00000000  00000000  00022f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000001cd  00000000  00000000  00023180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00028c35  00000000  00000000  0002334d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00002a5d  00000000  00000000  0004bf82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014e7ff  00000000  00000000  0004e9df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000008ac  00000000  00000000  0019d1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000054  00000000  00000000  0019da8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000008 	.word	0x24000008
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080005e4 	.word	0x080005e4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400000c 	.word	0x2400000c
 80002d4:	080005e4 	.word	0x080005e4

080002d8 <main>:
void SystemClock_Config(void);
void GPIO_Init(void);
void delay_ms(uint32_t ms);

int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
    SystemClock_Config(); // Cấu hình clock
 80002dc:	f000 f866 	bl	80003ac <SystemClock_Config>
    GPIO_Init();          // Khởi tạo GPIO
 80002e0:	f000 f80e 	bl	8000300 <GPIO_Init>

    while (1)
    {
        GPIOE->ODR ^= GPIO_ODR_OD3; // Toggle LED
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <main+0x24>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	4a04      	ldr	r2, [pc, #16]	; (80002fc <main+0x24>)
 80002ea:	f083 0308 	eor.w	r3, r3, #8
 80002ee:	6153      	str	r3, [r2, #20]
        delay_ms(500);             // Delay 500ms
 80002f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002f4:	f000 f836 	bl	8000364 <delay_ms>
        GPIOE->ODR ^= GPIO_ODR_OD3; // Toggle LED
 80002f8:	e7f4      	b.n	80002e4 <main+0xc>
 80002fa:	bf00      	nop
 80002fc:	58021000 	.word	0x58021000

08000300 <GPIO_Init>:
    }
}

void GPIO_Init(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
    RCC->AHB4ENR |= RCC_AHB4ENR_GPIOEEN; // Bật clock GPIOE
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <GPIO_Init+0x5c>)
 8000306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800030a:	4a14      	ldr	r2, [pc, #80]	; (800035c <GPIO_Init+0x5c>)
 800030c:	f043 0310 	orr.w	r3, r3, #16
 8000310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

    GPIOE->MODER &= ~GPIO_MODER_MODE3;   // Clear mode bits cho PE3
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <GPIO_Init+0x60>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a11      	ldr	r2, [pc, #68]	; (8000360 <GPIO_Init+0x60>)
 800031a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800031e:	6013      	str	r3, [r2, #0]
    GPIOE->MODER |= GPIO_MODER_MODE3_0; // Set PE3 làm output
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <GPIO_Init+0x60>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <GPIO_Init+0x60>)
 8000326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800032a:	6013      	str	r3, [r2, #0]
    GPIOE->OTYPER &= ~GPIO_OTYPER_OT3;  // Push-pull
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <GPIO_Init+0x60>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	4a0b      	ldr	r2, [pc, #44]	; (8000360 <GPIO_Init+0x60>)
 8000332:	f023 0308 	bic.w	r3, r3, #8
 8000336:	6053      	str	r3, [r2, #4]
    GPIOE->OSPEEDR |= GPIO_OSPEEDR_OSPEED3; // High speed
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <GPIO_Init+0x60>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	4a08      	ldr	r2, [pc, #32]	; (8000360 <GPIO_Init+0x60>)
 800033e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000342:	6093      	str	r3, [r2, #8]
    GPIOE->PUPDR &= ~GPIO_PUPDR_PUPD3;  // No pull-up, pull-down
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <GPIO_Init+0x60>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a05      	ldr	r2, [pc, #20]	; (8000360 <GPIO_Init+0x60>)
 800034a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800034e:	60d3      	str	r3, [r2, #12]
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	58024400 	.word	0x58024400
 8000360:	58021000 	.word	0x58021000

08000364 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
    uint32_t count = ms * (SystemCoreClock / 20000); // Tính theo tần số thực tế
 800036c:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <delay_ms+0x40>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a0d      	ldr	r2, [pc, #52]	; (80003a8 <delay_ms+0x44>)
 8000372:	fba2 2303 	umull	r2, r3, r2, r3
 8000376:	0b9a      	lsrs	r2, r3, #14
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	fb02 f303 	mul.w	r3, r2, r3
 800037e:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < count; i++)
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	e003      	b.n	800038e <delay_ms+0x2a>
    {
        __NOP(); // Waste one clock cycle
 8000386:	bf00      	nop
    for (uint32_t i = 0; i < count; i++)
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3301      	adds	r3, #1
 800038c:	60fb      	str	r3, [r7, #12]
 800038e:	68fa      	ldr	r2, [r7, #12]
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	429a      	cmp	r2, r3
 8000394:	d3f7      	bcc.n	8000386 <delay_ms+0x22>
    }
}
 8000396:	bf00      	nop
 8000398:	bf00      	nop
 800039a:	3714      	adds	r7, #20
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr
 80003a4:	24000000 	.word	0x24000000
 80003a8:	d1b71759 	.word	0xd1b71759

080003ac <SystemClock_Config>:

void SystemClock_Config(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
//
//    RCC->CFGR |= RCC_CFGR_SW_PLL1;
//    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL1);
//
//    SystemCoreClockUpdate();
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr

080003ba <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003be:	e7fe      	b.n	80003be <NMI_Handler+0x4>

080003c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <HardFault_Handler+0x4>

080003c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003ca:	e7fe      	b.n	80003ca <MemManage_Handler+0x4>

080003cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <BusFault_Handler+0x4>

080003d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d6:	e7fe      	b.n	80003d6 <UsageFault_Handler+0x4>

080003d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr

080003e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000406:	f000 f8b5 	bl	8000574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
	...

08000410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000414:	4b37      	ldr	r3, [pc, #220]	; (80004f4 <SystemInit+0xe4>)
 8000416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800041a:	4a36      	ldr	r2, [pc, #216]	; (80004f4 <SystemInit+0xe4>)
 800041c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000424:	4b34      	ldr	r3, [pc, #208]	; (80004f8 <SystemInit+0xe8>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f003 030f 	and.w	r3, r3, #15
 800042c:	2b06      	cmp	r3, #6
 800042e:	d807      	bhi.n	8000440 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000430:	4b31      	ldr	r3, [pc, #196]	; (80004f8 <SystemInit+0xe8>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f023 030f 	bic.w	r3, r3, #15
 8000438:	4a2f      	ldr	r2, [pc, #188]	; (80004f8 <SystemInit+0xe8>)
 800043a:	f043 0307 	orr.w	r3, r3, #7
 800043e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000440:	4b2e      	ldr	r3, [pc, #184]	; (80004fc <SystemInit+0xec>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a2d      	ldr	r2, [pc, #180]	; (80004fc <SystemInit+0xec>)
 8000446:	f043 0301 	orr.w	r3, r3, #1
 800044a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800044c:	4b2b      	ldr	r3, [pc, #172]	; (80004fc <SystemInit+0xec>)
 800044e:	2200      	movs	r2, #0
 8000450:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000452:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <SystemInit+0xec>)
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	4929      	ldr	r1, [pc, #164]	; (80004fc <SystemInit+0xec>)
 8000458:	4b29      	ldr	r3, [pc, #164]	; (8000500 <SystemInit+0xf0>)
 800045a:	4013      	ands	r3, r2
 800045c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800045e:	4b26      	ldr	r3, [pc, #152]	; (80004f8 <SystemInit+0xe8>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f003 0308 	and.w	r3, r3, #8
 8000466:	2b00      	cmp	r3, #0
 8000468:	d007      	beq.n	800047a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800046a:	4b23      	ldr	r3, [pc, #140]	; (80004f8 <SystemInit+0xe8>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f023 030f 	bic.w	r3, r3, #15
 8000472:	4a21      	ldr	r2, [pc, #132]	; (80004f8 <SystemInit+0xe8>)
 8000474:	f043 0307 	orr.w	r3, r3, #7
 8000478:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800047a:	4b20      	ldr	r3, [pc, #128]	; (80004fc <SystemInit+0xec>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000480:	4b1e      	ldr	r3, [pc, #120]	; (80004fc <SystemInit+0xec>)
 8000482:	2200      	movs	r2, #0
 8000484:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000486:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <SystemInit+0xec>)
 8000488:	2200      	movs	r2, #0
 800048a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800048c:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <SystemInit+0xec>)
 800048e:	4a1d      	ldr	r2, [pc, #116]	; (8000504 <SystemInit+0xf4>)
 8000490:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000492:	4b1a      	ldr	r3, [pc, #104]	; (80004fc <SystemInit+0xec>)
 8000494:	4a1c      	ldr	r2, [pc, #112]	; (8000508 <SystemInit+0xf8>)
 8000496:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000498:	4b18      	ldr	r3, [pc, #96]	; (80004fc <SystemInit+0xec>)
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <SystemInit+0xfc>)
 800049c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800049e:	4b17      	ldr	r3, [pc, #92]	; (80004fc <SystemInit+0xec>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80004a4:	4b15      	ldr	r3, [pc, #84]	; (80004fc <SystemInit+0xec>)
 80004a6:	4a19      	ldr	r2, [pc, #100]	; (800050c <SystemInit+0xfc>)
 80004a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80004aa:	4b14      	ldr	r3, [pc, #80]	; (80004fc <SystemInit+0xec>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <SystemInit+0xec>)
 80004b2:	4a16      	ldr	r2, [pc, #88]	; (800050c <SystemInit+0xfc>)
 80004b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80004b6:	4b11      	ldr	r3, [pc, #68]	; (80004fc <SystemInit+0xec>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <SystemInit+0xec>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <SystemInit+0xec>)
 80004c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <SystemInit+0xec>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <SystemInit+0x100>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	4b10      	ldr	r3, [pc, #64]	; (8000514 <SystemInit+0x104>)
 80004d4:	4013      	ands	r3, r2
 80004d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80004da:	d202      	bcs.n	80004e2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <SystemInit+0x108>)
 80004de:	2201      	movs	r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <SystemInit+0x10c>)
 80004e4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80004e8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	e000ed00 	.word	0xe000ed00
 80004f8:	52002000 	.word	0x52002000
 80004fc:	58024400 	.word	0x58024400
 8000500:	eaf6ed7f 	.word	0xeaf6ed7f
 8000504:	02020200 	.word	0x02020200
 8000508:	01ff0000 	.word	0x01ff0000
 800050c:	01010280 	.word	0x01010280
 8000510:	5c001000 	.word	0x5c001000
 8000514:	ffff0000 	.word	0xffff0000
 8000518:	51008108 	.word	0x51008108
 800051c:	52004000 	.word	0x52004000

08000520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000558 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000524:	f7ff ff74 	bl	8000410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000528:	480c      	ldr	r0, [pc, #48]	; (800055c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800052a:	490d      	ldr	r1, [pc, #52]	; (8000560 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800052c:	4a0d      	ldr	r2, [pc, #52]	; (8000564 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000530:	e002      	b.n	8000538 <LoopCopyDataInit>

08000532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000536:	3304      	adds	r3, #4

08000538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800053c:	d3f9      	bcc.n	8000532 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053e:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000540:	4c0a      	ldr	r4, [pc, #40]	; (800056c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000544:	e001      	b.n	800054a <LoopFillZerobss>

08000546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000548:	3204      	adds	r2, #4

0800054a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800054c:	d3fb      	bcc.n	8000546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800054e:	f000 f825 	bl	800059c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000552:	f7ff fec1 	bl	80002d8 <main>
  bx  lr
 8000556:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000558:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800055c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000560:	24000008 	.word	0x24000008
  ldr r2, =_sidata
 8000564:	08000604 	.word	0x08000604
  ldr r2, =_sbss
 8000568:	24000008 	.word	0x24000008
  ldr r4, =_ebss
 800056c:	24000028 	.word	0x24000028

08000570 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000570:	e7fe      	b.n	8000570 <ADC3_IRQHandler>
	...

08000574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_IncTick+0x20>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_IncTick+0x24>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4413      	add	r3, r2
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <HAL_IncTick+0x24>)
 8000586:	6013      	str	r3, [r2, #0]
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	24000004 	.word	0x24000004
 8000598:	24000024 	.word	0x24000024

0800059c <__libc_init_array>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	4d0d      	ldr	r5, [pc, #52]	; (80005d4 <__libc_init_array+0x38>)
 80005a0:	4c0d      	ldr	r4, [pc, #52]	; (80005d8 <__libc_init_array+0x3c>)
 80005a2:	1b64      	subs	r4, r4, r5
 80005a4:	10a4      	asrs	r4, r4, #2
 80005a6:	2600      	movs	r6, #0
 80005a8:	42a6      	cmp	r6, r4
 80005aa:	d109      	bne.n	80005c0 <__libc_init_array+0x24>
 80005ac:	4d0b      	ldr	r5, [pc, #44]	; (80005dc <__libc_init_array+0x40>)
 80005ae:	4c0c      	ldr	r4, [pc, #48]	; (80005e0 <__libc_init_array+0x44>)
 80005b0:	f000 f818 	bl	80005e4 <_init>
 80005b4:	1b64      	subs	r4, r4, r5
 80005b6:	10a4      	asrs	r4, r4, #2
 80005b8:	2600      	movs	r6, #0
 80005ba:	42a6      	cmp	r6, r4
 80005bc:	d105      	bne.n	80005ca <__libc_init_array+0x2e>
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c4:	4798      	blx	r3
 80005c6:	3601      	adds	r6, #1
 80005c8:	e7ee      	b.n	80005a8 <__libc_init_array+0xc>
 80005ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ce:	4798      	blx	r3
 80005d0:	3601      	adds	r6, #1
 80005d2:	e7f2      	b.n	80005ba <__libc_init_array+0x1e>
 80005d4:	080005fc 	.word	0x080005fc
 80005d8:	080005fc 	.word	0x080005fc
 80005dc:	080005fc 	.word	0x080005fc
 80005e0:	08000600 	.word	0x08000600

080005e4 <_init>:
 80005e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e6:	bf00      	nop
 80005e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ea:	bc08      	pop	{r3}
 80005ec:	469e      	mov	lr, r3
 80005ee:	4770      	bx	lr

080005f0 <_fini>:
 80005f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f2:	bf00      	nop
 80005f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f6:	bc08      	pop	{r3}
 80005f8:	469e      	mov	lr, r3
 80005fa:	4770      	bx	lr
